name: gem5 Performance Test Template (Unified)

on:
  workflow_call:
    inputs:
      script_path:
        required: true
        type: string
      benchmark_type:
        required: true
        type: string
        description: "Benchmark type: spec06-0.8c, spec06-1.0c, or spec17-1.0c"

jobs:
  run_performance_test:
    runs-on: [self-hosted, node]
    continue-on-error: false
    name: XS-GEM5 - Run performance test (${{ inputs.benchmark_type }})
    steps:
      - uses: actions/checkout@v2
      - name: Set benchmark configuration
        id: config
        run: |
          case "${{ inputs.benchmark_type }}" in
            "spec06-0.8c")
              echo "checkpoint_list=/nfs/home/share/gem5_ci/spec06_cpts/spec_0.8c_int.lst" >> $GITHUB_OUTPUT
              echo "checkpoint_root_node=/nfs/home/share/jiaxiaoyu/simpoint_checkpoint_zstd_format/spec06_rv64gcb_O3_20m_gcc12.2.0-intFpcOff-jeMalloc" >> $GITHUB_OUTPUT
              echo "score_script=gem5-score-ci.sh" >> $GITHUB_OUTPUT
              echo "cluster_config=/nfs/home/share/gem5_ci/spec06_cpts/cluster-0-0.json" >> $GITHUB_OUTPUT
              echo "artifact_name=performance-score-spec06-0.8c" >> $GITHUB_OUTPUT
              echo "comment=run 80% coverage spec06 checkpoints, 500+ checkpoints" >> $GITHUB_OUTPUT
              ;;
            "spec06-1.0c")
              echo "checkpoint_list=/nfs/home/share/gem5_ci/spec06_cpts/checkpoint-0-0-0.lst" >> $GITHUB_OUTPUT
              echo "checkpoint_root_node=/nfs/home/share/jiaxiaoyu/simpoint_checkpoint_zstd_format/spec06_rv64gcb_O3_20m_gcc12.2.0-intFpcOff-jeMalloc" >> $GITHUB_OUTPUT
              echo "score_script=gem5-score-ci.sh" >> $GITHUB_OUTPUT
              echo "cluster_config=/nfs/home/share/gem5_ci/spec06_cpts/cluster-0-0.json" >> $GITHUB_OUTPUT
              echo "artifact_name=performance-score-spec06-1.0c" >> $GITHUB_OUTPUT
              echo "comment=run 100% coverage spec06 checkpoints" >> $GITHUB_OUTPUT
              ;;
            "spec17-1.0c")
              echo "checkpoint_list=/nfs/home/yanyue/spec17_cpts/checkpoint-0-0-0/checkpoint.lst" >> $GITHUB_OUTPUT
              echo "checkpoint_root_node=/nfs/home/yanyue/spec17_cpts/checkpoint-0-0-0/" >> $GITHUB_OUTPUT
              echo "score_script=gem5-score-ci-17.sh" >> $GITHUB_OUTPUT
              echo "cluster_config=/nfs/home/yanyue/spec17_cpts/checkpoint-0-0-0/cluster-0-0.json" >> $GITHUB_OUTPUT
              echo "artifact_name=performance-score-spec17-1.0c" >> $GITHUB_OUTPUT
              echo "comment=run 100% coverage spec17 checkpoints" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Error: Invalid benchmark_type '${{ inputs.benchmark_type }}'. Must be one of: spec06-0.8c, spec06-1.0c, spec17-1.0c"
              exit 1
              ;;
          esac
      - name: Build DRAMSim
        run: |
          export GEM5_HOME=$(pwd)
          cd ext/dramsim3
          git clone https://github.com/umd-memsys/DRAMsim3.git DRAMsim3
          cd DRAMsim3 && mkdir -p build
          cd build
          cmake ..
          make -j 48
          cd $GEM5_HOME
      - name: Build GEM5 opt
        run: |
          # use pgo profile to build gem5
          export GEM5_HOME=$(pwd)
          export GCBV_REF_SO="/nfs/home/share/gem5_ci/ref/normal/riscv64-nemu-interpreter-so"
          bash util/pgo/basic_pgo_new.sh
      - name: XS-GEM5 - Run performance test
        # ${{ steps.config.outputs.comment }}
        run: |

          export GCBV_REF_SO="/nfs/home/share/gem5_ci/ref/normal/riscv64-nemu-interpreter-so"
          export GCB_RESTORER=""
          export GEM5_HOME=$(pwd)
          mkdir -p $GEM5_HOME/util/xs_scripts/test
          cd $GEM5_HOME/util/xs_scripts/test
          bash ../parallel_sim.sh `realpath ${{ inputs.script_path }}` \
            ${{ steps.config.outputs.checkpoint_list }} \
            ${{ steps.config.outputs.checkpoint_root_node}} \
            spec_all
      - name: Setup gem5_data_proc environment
        run: |
          # 克隆数据处理仓库到 CI 工作目录
          cd $GITHUB_WORKSPACE
          git clone https://github.com/shinezyy/gem5_data_proc
      - name: Check performance test result
        run: |
          # 添加yanyue的 Python 包路径, 包含pandas等
          export PYTHONPATH=/nfs/home/yanyue/.local/lib/python3.10/site-packages:$PYTHONPATH
          # 每次run 会进入新的shell, 需要重新设置GEM5_HOME
          export GEM5_HOME=$GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE/gem5_data_proc
          # 使用已有的数据spec_all生成测试报告
          bash example-scripts/${{ steps.config.outputs.score_script }} \
            $GEM5_HOME/util/xs_scripts/test/spec_all \
            ${{ steps.config.outputs.cluster_config }} \
            > $GITHUB_WORKSPACE/score.txt
          # 提取最后42行score信息
          echo "### performance test result :rocket:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 42 $GITHUB_WORKSPACE/score.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # 提取关键指标
          FINAL_SCORE=$(grep "Estimated Int score per GHz:" $GITHUB_WORKSPACE/score.txt | awk '{print $NF}')
          echo "### Key indicators" >> $GITHUB_STEP_SUMMARY
          echo "- Final Int score per GHz: **${FINAL_SCORE}**" >> $GITHUB_STEP_SUMMARY
          
          # 最后检查是否存在abort文件， 如果存在，打出前10个错误名字
          if find $GEM5_HOME/util/xs_scripts/test/spec_all -type f -name "abort" | grep -q .; then
            echo "### :x: Test Failures Detected!" >> $GITHUB_STEP_SUMMARY
            echo "Failed test count: $(find $GEM5_HOME/util/xs_scripts/test/spec_all -type f -name "abort" | wc -l)" >> $GITHUB_STEP_SUMMARY
            echo "First 10 failed tests:" >> $GITHUB_STEP_SUMMARY
            find $GEM5_HOME/util/xs_scripts/test/spec_all -type f -name "abort" | 
              sed 's|.*/\([^/]*\)/abort|\1|' |
              head -n 10 |
              while read -r line; do
                echo "- $line" >> $GITHUB_STEP_SUMMARY
              done
            exit 1
          fi
      - name: Upload score
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.config.outputs.artifact_name }}
          path: ${{ github.workspace }}/score.txt 