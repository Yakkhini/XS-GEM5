#特殊变量:特殊变量使用"$xx$"括起来
#sublog:当前work的log文件夹,比如:"./log_root/[hash]/work1",由脚本在运行时替换
#如果是pre-work或者post-work,则sublog代表当前commit的log文件夹,比如"./log_root/[hash]"
#tid:当前work所分配的线程id,比如最大线程5,tid=0~4中的任意一个,只能在work-xxx中使用
#binfile:single模式下,binfile指定待测试文件的完整路径名称
#numa:使用numactrl来对任务进行分配核,需要任务具有numacores变量,脚本会自动生成合适的numactrl参数,比如numa -m 0 -C 0-7

#ci运行时当前目录即为仓库根目录
[global]
debug_mode = true
#指定log的输出路径
log_root = ./log_root_v
set_env=export GCBV_REF_SO="/nfs/home/share/gem5_ci/ref/normal/riscv64-nemu-notama-so" && \
	export GCB_RESTORER=""

[iteration]
working_mode=single
#允许最多同时运行的checkpoints
max_process=48
#迭代次数
num = 1
#结束后不做延迟
end_delay= 0
#忽略迭代中的错误(仍会执行except并最终返回-1)
#迭代次数为1时不用关心
except_mode = stop
#运行时动态分配处理器核心
smode=dy
#静态分配处理器核心范围(不用关心)
srange=1,2


[pre-work]
pre-task = 
task = echo will start running GEM5
except-task =

[work-vector-test]
binpath = /nfs/home/share/gem5_ci/vector_test/*.bin
numacores = 0
pre-task = 
fs_path = ./configs/example/kmh.py --enable-riscv-vector --restore-rvv-cpt
task ={set_env} && ./build/RISCV/gem5.opt \
    --outdir=$sublog$ \
    {fs_path} \
	--dramsim3-ini=./ext/dramsim3/xiangshan_configs/xiangshan_DDR4_8Gb_x8_3200_2ch.ini \
	--raw-cpt --generic-rv-cpt=$binfile$ 
post-task = 
except-task = echo gem5 running error!


[post-work]
task= 
post-task = echo run finish
except-task =
